# Generated by Django 3.1.3 on 2021-01-02 13:48

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import simple_history.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('courses', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('events', '0001_initial'),
        ('payments', '0001_initial'),
        ('documents', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Player',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(max_length=30, verbose_name='First name')),
                ('last_name', models.CharField(max_length=30, verbose_name='Last name')),
                ('email', models.CharField(max_length=200, unique=True, verbose_name='Email')),
                ('phone_number', models.CharField(blank=True, max_length=20, null=True, verbose_name='Phone number')),
                ('ghin', models.CharField(blank=True, max_length=8, null=True, unique=True, verbose_name='GHIN')),
                ('tee', models.CharField(default='Club', max_length=8, verbose_name='Tee')),
                ('birth_date', models.DateField(blank=True, null=True, verbose_name='Birth date')),
                ('save_last_card', models.BooleanField(default=True, verbose_name='Save Last Card Used')),
                ('stripe_customer_id', models.CharField(blank=True, max_length=40, null=True, verbose_name='Stripe ID')),
                ('favorites', models.ManyToManyField(blank=True, related_name='_player_favorites_+', to='register.Player')),
                ('profile_picture', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='documents.photo', verbose_name='Profile picture')),
            ],
            options={
                'ordering': ('last_name', 'first_name'),
                'base_manager_name': 'objects',
            },
        ),
        migrations.CreateModel(
            name='Registration',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('signed_up_by', models.CharField(blank=True, max_length=40, null=True, verbose_name='Signed up by')),
                ('expires', models.DateTimeField(blank=True, null=True, verbose_name='Expiration')),
                ('starting_hole', models.IntegerField(blank=True, default=1, verbose_name='Starting hole')),
                ('starting_order', models.IntegerField(default=0, verbose_name='Starting order')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='Registration notes')),
                ('created_date', models.DateTimeField(auto_now_add=True, verbose_name='Created date')),
                ('course', models.ForeignKey(null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='courses.course', verbose_name='Course')),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='events.event', verbose_name='Event')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
        ),
        migrations.CreateModel(
            name='RegistrationSlot',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('starting_order', models.IntegerField(default=0, verbose_name='Starting order')),
                ('slot', models.IntegerField(default=0, verbose_name='Slot number')),
                ('status', models.CharField(choices=[('A', 'Available'), ('P', 'Pending'), ('R', 'Reserved'), ('U', 'Unavailable')], default='A', max_length=1, verbose_name='Status')),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='registrations', to='events.event', verbose_name='Event')),
                ('hole', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='courses.hole', verbose_name='Hole')),
                ('player', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='register.player', verbose_name='Player')),
                ('registration', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='slots', to='register.registration', verbose_name='Registration')),
            ],
        ),
        migrations.CreateModel(
            name='RegistrationFee',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_paid', models.BooleanField(default=False, verbose_name='Is Paid')),
                ('event_fee', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='events.eventfee', verbose_name='Event Fee')),
                ('payment', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='payment_details', to='payments.payment', verbose_name='Payment')),
                ('registration_slot', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='fees', to='register.registrationslot', verbose_name='Registration Slot')),
            ],
        ),
        migrations.CreateModel(
            name='HistoricalRegistrationSlot',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('starting_order', models.IntegerField(default=0, verbose_name='Starting order')),
                ('slot', models.IntegerField(default=0, verbose_name='Slot number')),
                ('status', models.CharField(choices=[('A', 'Available'), ('P', 'Pending'), ('R', 'Reserved'), ('U', 'Unavailable')], default='A', max_length=1, verbose_name='Status')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('event', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='events.event', verbose_name='Event')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('hole', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='courses.hole', verbose_name='Hole')),
                ('player', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='register.player', verbose_name='Player')),
                ('registration', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='register.registration', verbose_name='Registration')),
            ],
            options={
                'verbose_name': 'historical registration slot',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalRegistration',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('signed_up_by', models.CharField(blank=True, max_length=40, null=True, verbose_name='Signed up by')),
                ('expires', models.DateTimeField(blank=True, null=True, verbose_name='Expiration')),
                ('starting_hole', models.IntegerField(blank=True, default=1, verbose_name='Starting hole')),
                ('starting_order', models.IntegerField(default=0, verbose_name='Starting order')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='Registration notes')),
                ('created_date', models.DateTimeField(blank=True, editable=False, verbose_name='Created date')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('course', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='courses.course', verbose_name='Course')),
                ('event', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='events.event', verbose_name='Event')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'historical registration',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalPlayer',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('first_name', models.CharField(max_length=30, verbose_name='First name')),
                ('last_name', models.CharField(max_length=30, verbose_name='Last name')),
                ('email', models.CharField(db_index=True, max_length=200, verbose_name='Email')),
                ('phone_number', models.CharField(blank=True, max_length=20, null=True, verbose_name='Phone number')),
                ('ghin', models.CharField(blank=True, db_index=True, max_length=8, null=True, verbose_name='GHIN')),
                ('tee', models.CharField(default='Club', max_length=8, verbose_name='Tee')),
                ('birth_date', models.DateField(blank=True, null=True, verbose_name='Birth date')),
                ('save_last_card', models.BooleanField(default=True, verbose_name='Save Last Card Used')),
                ('stripe_customer_id', models.CharField(blank=True, max_length=40, null=True, verbose_name='Stripe ID')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('profile_picture', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='documents.photo', verbose_name='Profile picture')),
            ],
            options={
                'verbose_name': 'historical player',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.AddConstraint(
            model_name='registrationslot',
            constraint=models.UniqueConstraint(fields=('event', 'player'), name='unique_player_registration'),
        ),
    ]
